---
import type { Image as ImageInterface } from './Image.astro';
import Image from './Image.astro';
import TextFlow from './TextFlow.astro';

interface Props {

    /** Link url for card */
    href? : string,

    /** Link Text for card button */
    linkText? : string,

    /** Classes for card button */
    linkClass? : string

    /** Img object for card img */
    img? : ImageInterface,

    /** Is entire card clickable? */
    clickable? : boolean,

    class?  : string

    /**
     * @prop href (string)
     * @prop linkText (string)
     * @prop linkClass (string)
     * @prop img (Image)
     * @prop clickable (boolean)
     * @prop slot ( 'heading' | 'content' )
     */
    props? : true
}

const {
    href,
    linkText,
    img,
    clickable = false,
    linkClass,
    class : className
} = Astro.props
---


{ clickable && href && 

    <a href={href} class={`card ${className}`}>
    
        { img && <Image src={img.src} lazy width={img.width} height={img.height} alt={img.alt} class="object-cover" /> }

        <TextFlow>
            <slot name="heading" />
            <slot name="content" />
        </TextFlow>
        
        { linkText && 
            <span class={`card-link ${linkClass}`}>
                {linkText}
            </span>
        }
    
    </a>

}

{ !clickable && href &&

    <div class={`card ${className}`}>

        { img && <Image src={img.src} lazy width={img.width} height={img.height} alt={img.alt} /> }

        <slot name="heading" />
        <slot name="content" />

        { linkText &&
            <a href={href} class={`card-link ${linkClass}`}>
                {linkText}
            </a>
        }

    </div>
}

{ !href && 

    <div class={`card ${className}`}>

        { img && <Image src={img.src} lazy width={img.width} height={img.height} alt={img.alt} /> }

        <slot name="heading" />
        <slot name="content" />

    </div>
}


<style>

.card {
    display : flex;
    flex-direction: column;
    align-items: flex-start;
    align-content: stretch;
    /* gap : 1.2rem; */
    overflow : hidden;
}

.card-link {
    display : inline-block;
    margin-top : auto;
    margin-bottom: 1rem;
    padding : 0.5rem 1.25rem;
    background-color: var(--button-bg-color);
    color : var(--button-text-color);
}

.card-link:hover, .card-link:focus-visible {
    background-color: var(--button-bg-color-hover);
    color : var(--button-text-color-hover);
}

img {
    width : 100%;
    aspect-ratio: 3 / 2;
    object-fit: cover;
}

</style>

