---
import type { HTMLAttributes } from 'astro/types'
import Wrapper from './Wrapper.astro';
import Logo from './Logo.astro';
import MobileMenuBtn from './Nav/MobileMenuBtn.astro';
import NavLinkList from './Nav/NavLinkList.astro';
import SocialLinkList from './Nav/SocialLinkList.astro';

interface Props extends HTMLAttributes<'header'> {

    variant? : 'relative' | 'sticky' | 'fixed',

    class? : string,

    /**
     * @extends <header>
     * @prop variant? : 'relative' | 'sticky' | 'fixed'
     * @prop toggleTransparencyOnScroll? : boolean,
     * @prop class? : string,
     */
    props? : true
}



const {
    variant = 'relative',
    class: className
} = Astro.props

const currentPage = Astro.url.pathname

---


{/**
 * NavBar ordering
 * 
 * Mobile
 * 1. Logo
 * 2. CTA
 * 3. MobileMenuBtn
 * 4. <nav></nav>
 * 
 * Desktop
 * 1. Logo
 * 2. <nav></nav>
 * 3. CTA
 * 
 */}


<header
    data-element="header-main"
    class:list={[
        'header-bg',
        `${variant === 'relative' ? 'relative' : ''}`,
        `${variant === 'sticky' ? 'sticky top-0 z-[999]' : ''}`,
        `${variant === 'fixed' ? 'fixed top-0 left-0 right-0 z-[999]' : ''}`,
        className
    ]}
>

    <Wrapper width='max' padding='inline'>


        <div class="nav-wrapper">

            <div class="order-1 mr-auto">
                <Logo />
            </div>

            <div class="order-3 lg:hidden flex items-center">
                <MobileMenuBtn />
            </div>
            
            <nav class="order-4 lg:order-2 relative grid items-end gap-2 w-full lg:w-auto">
                <SocialLinkList /> 
                <NavLinkList />
            </nav>


        </div>

    </Wrapper>

</header>


<style is:global>


header {
    transition: all 250ms;
    background-color: var(--nav-bar-bg-color);
    color : var(--nav-bar-text-color);
}

.header-bg {
    background-color: hsl( var(--primary-color) 95% / 0.8 );
    backdrop-filter: blur(12px);
}

.nav-wrapper {
    display : flex;
    align-items: center;
    column-gap:  1rem;
    flex-wrap: wrap;
    padding-top : 0.5rem;
}
    
</style>


<script>
// @ts-ignore
import debounce from 'lodash.debounce'

const header = document.querySelector('[data-element="header-main"]') as HTMLDivElement
    
const toggleHeaderBGClass = () => {
    if(screen.availWidth < 1023 ) {
        header.classList.add('header-bg')
        return
    }
    header.classList.toggle('header-bg', scrollY > 50)
}

document.addEventListener('scroll', debounce(toggleHeaderBGClass, 50) )
window.addEventListener('resize', debounce(toggleHeaderBGClass, 50) )

</script>
    
    
